// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PayCloud.Data.DbContext;

namespace PayCloud.Data.Migrations
{
    [DbContext(typeof(PayCloudDbContext))]
    [Migration("20190608113352_User_Transaction_relation_added")]
    partial class User_Transaction_relation_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PayCloud.Data.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<decimal>("Balance");

                    b.Property<int>("ClientId");

                    b.Property<byte[]>("ConcurrencyRowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.HasKey("AccountId");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PayCloud.Data.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("ImgLocationPath")
                        .IsRequired();

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UrlLink")
                        .IsRequired();

                    b.HasKey("BannerId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("PayCloud.Data.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.HasKey("ClientId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PayCloud.Data.Models.PayCloudUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("UserId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("PayCloudUsers");
                });

            modelBuilder.Entity("PayCloud.Data.Models.PayCloudUserAccount", b =>
                {
                    b.Property<int>("PayCloudUserId");

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("AddedOn");

                    b.HasKey("PayCloudUserId", "AccountId");

                    b.HasIndex("AccountId");

                    b.ToTable("UsersAccounts");
                });

            modelBuilder.Entity("PayCloud.Data.Models.PayCloudUserClient", b =>
                {
                    b.Property<int>("PayCloudUserId");

                    b.Property<int>("ClientId");

                    b.HasKey("PayCloudUserId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("UsersClients");
                });

            modelBuilder.Entity("PayCloud.Data.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<int>("ReceiverAccountId");

                    b.Property<int>("SenderAccountId");

                    b.Property<DateTime?>("SentOn");

                    b.Property<int>("StatusCode");

                    b.HasKey("TransactionId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ReceiverAccountId");

                    b.HasIndex("SenderAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("PayCloud.Data.Models.Account", b =>
                {
                    b.HasOne("PayCloud.Data.Models.Client", "Client")
                        .WithMany("Accounts")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PayCloud.Data.Models.PayCloudUserAccount", b =>
                {
                    b.HasOne("PayCloud.Data.Models.Account", "Account")
                        .WithMany("AccountUsers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PayCloud.Data.Models.PayCloudUser", "PayCloudUser")
                        .WithMany("UserAccounts")
                        .HasForeignKey("PayCloudUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PayCloud.Data.Models.PayCloudUserClient", b =>
                {
                    b.HasOne("PayCloud.Data.Models.Client", "Client")
                        .WithMany("ClientUsers")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PayCloud.Data.Models.PayCloudUser", "PayCloudUser")
                        .WithMany("UserClients")
                        .HasForeignKey("PayCloudUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PayCloud.Data.Models.Transaction", b =>
                {
                    b.HasOne("PayCloud.Data.Models.PayCloudUser", "CreatedByUser")
                        .WithMany("UserTransactions")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayCloud.Data.Models.Account", "ReceiverAccount")
                        .WithMany("ReciveTransactions")
                        .HasForeignKey("ReceiverAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PayCloud.Data.Models.Account", "SenderAccount")
                        .WithMany("SentTransactions")
                        .HasForeignKey("SenderAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
